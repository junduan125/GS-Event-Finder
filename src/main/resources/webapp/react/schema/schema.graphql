type Query {
	profile: GSProfile
  	node(id: ID!): Node
}

interface Node {
	id: ID!
}

type Mutation {
	addUserCharacter(characterType: Int!, level: Int): [UserCharacter]
	editUserCharacter(characterType: Int, level: Int): UserCharacter
	removeUserCharacter(characterType: Int): [UserCharacter]
	
	createEvent(eventTime: Int!, eventType: Int!): GSEvent
	joinEvent(id: ID): GSEvent
	leaveEvent(id: ID): Boolean
	
	rateUser(id: ID, overall: Int, griefed: Boolean, flaked: Boolean): Boolean
}

type GSProfile implements Node {
  	id: ID!
    user: GSUser
    characters: [UserCharacter]
    events(first: Int, after: Int): GSEventEdgeConnection
}

type GSEventEdgeConnection {
  edges: [GSEventEdge]
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type GSEventEdge {
	cursor: String!
	node: GSEvent
}

type GSUser {
	username: String!
}

type UserCharacter {
	characterTypeID: Int
	level: Int
}

type GSEvent implements Node {
  	id: ID!
	eventTime: Int
	eventType: Int
}

input SortOptions {
	field: String!
	order: String!
}